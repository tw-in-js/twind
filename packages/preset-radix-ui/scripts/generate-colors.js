import { writeFileSync } from 'node:fs'

import * as RADIX_COLORS from '@radix-ui/colors'

const targetFile = new URL('../src/colors.ts', import.meta.url)

const header = `
// Based on https://github.com/radix-ui/colors
// Generated by ../scripts/generate-colors.js

/**
 * @module @twind/preset-radix-ui/colors
 */
`

const colors = Object.entries(RADIX_COLORS)
  .filter(([name]) => !['default', '__esModule'].includes(name) && !name.endsWith('A'))
  .map(([name, scale]) =>
    [
      `export const ${name} = {`,
      ...Object.entries(scale).map(
        ([key, value]) => `  ${key.replace(/\D/g, '')}: '${hslToHex(value)}',`,
      ),
      `} as const`,
    ].join('\n'),
  )

writeFileSync(targetFile, [header.trim(), ...colors].join('\n\n') + '\n')

console.log(`Written colors to ${targetFile}`)

// https://stackoverflow.com/a/44134328/968997
function hslToHex(hsl) {
  let {
    // eslint-disable-next-line prefer-const
    1: h,
    // eslint-disable-next-line prefer-const
    2: s,
    3: l,
  } = /(\d+), ([\d.]+)%, ([\d.]+)%/.exec(hsl)

  l /= 100
  const a = (s * Math.min(l, 1 - l)) / 100
  const f = (n) => {
    const k = (n + h / 30) % 12
    const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1)
    // convert to Hex and prefix "0" if needed
    return Math.round(255 * color)
      .toString(16)
      .padStart(2, '0')
  }

  return `#${f(0)}${f(8)}${f(4)}`
}
